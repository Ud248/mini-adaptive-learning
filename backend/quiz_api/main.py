from fastapi import FastAPI, HTTPException, Depends, Header
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
from typing import List, Optional, Dict, Any
import random
import json
import os
import uvicorn
import asyncio
from pymongo import MongoClient
from dotenv import load_dotenv
from datetime import datetime, timedelta, timezone
import hashlib
import secrets
from jose import jwt, JWTError

app = FastAPI(title="Quiz System API", version="1.0.0")

# Load env
load_dotenv()

# MongoDB config
MONGO_URL = os.getenv("MONGO_URL", "mongodb://localhost:27017")
MONGO_DB_NAME = os.getenv("DATABASE_NAME", "mini_adaptive_learning")
MONGO_COLLECTION = os.getenv("QUESTIONS_COLLECTION", "placement_questions")

# Auth config
JWT_SECRET_KEY = os.getenv("JWT_SECRET_KEY", "dev-secret-change-me")
JWT_ALGORITHM = os.getenv("JWT_ALGORITHM", "HS256")
ACCESS_TOKEN_EXPIRE_MINUTES = int(os.getenv("ACCESS_TOKEN_EXPIRE_MINUTES", "60"))

# Password hashing configuration
def hash_password(password: str) -> str:
    """Hash password using SHA-256 with salt"""
    salt = secrets.token_hex(16)
    password_hash = hashlib.sha256((password + salt).encode('utf-8')).hexdigest()
    return f"{salt}:{password_hash}"

_mongo_client: MongoClient | None = None

def get_mongo_client() -> MongoClient:
    global _mongo_client
    if _mongo_client is None:
        _mongo_client = MongoClient(MONGO_URL)
        # warm-up ping
        _mongo_client.admin.command("ping")
    return _mongo_client

# ===================== AUTH MODELS & HELPERS =====================

class LoginRequest(BaseModel):
    email_or_username: str
    password: str

class TokenResponse(BaseModel):
    access_token: str
    token_type: str = "bearer"
    expires_in: int


def create_access_token(subject: Dict[str, Any], expires_delta: Optional[timedelta] = None) -> str:
    to_encode = subject.copy()
    expire = datetime.now(timezone.utc) + (expires_delta or timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES))
    to_encode.update({"exp": expire})
    return jwt.encode(to_encode, JWT_SECRET_KEY, algorithm=JWT_ALGORITHM)

def verify_password(plain_password: str, password_hash: str) -> bool:
    """Verify password using SHA-256 with salt"""
    try:
        if ':' not in password_hash:
            return False
        salt, stored_hash = password_hash.split(':', 1)
        computed_hash = hashlib.sha256((plain_password + salt).encode('utf-8')).hexdigest()
        return computed_hash == stored_hash
    except Exception:
        return False

def get_user_by_identifier(identifier: str) -> Optional[Dict[str, Any]]:
    client = get_mongo_client()
    db = client[MONGO_DB_NAME]
    col = db["users"]
    user = col.find_one({"email": identifier.lower()})
    if not user:
        user = col.find_one({"username": identifier})
    return user

def decode_token(token: str) -> Optional[Dict[str, Any]]:
    try:
        print(f"üîç Backend - Decoding token: {token[:50]}...")
        payload = jwt.decode(token, JWT_SECRET_KEY, algorithms=[JWT_ALGORITHM])
        print(f"üîç Backend - Decoded payload: {payload}")
        return payload
    except JWTError as e:
        print(f"üîç Backend - JWT Error: {e}")
        return None

def get_current_user(authorization: Optional[str] = Header(None)) -> Optional[Dict[str, Any]]:
    print(f"üîç Backend - get_current_user called with authorization: {authorization[:50] if authorization else 'None'}...")
    if not authorization or not authorization.lower().startswith("bearer "):
        print("üîç Backend - No bearer token")
        raise HTTPException(status_code=401, detail="Not authenticated")
    token = authorization.split(" ", 1)[1]
    payload = decode_token(token)
    if not payload:
        print("üîç Backend - Invalid token payload")
        raise HTTPException(status_code=401, detail="Invalid token")
    user_data = {"user_id": payload.get("sub"), "email": payload.get("email"), "role": payload.get("role")}
    print(f"üîç Backend - Returning user data: {user_data}")
    return user_data

def load_questions_from_mongo(grade: Optional[int], subject: Optional[str], num_questions: int) -> List[Dict[str, Any]]:
    """T·∫£i c√¢u h·ªèi t·ª´ MongoDB collection 'placement_questions' v·ªõi logic 40 c√¢u: 20 skills x 2 c√¢u m·ªói skill."""
    client = get_mongo_client()
    db = client[MONGO_DB_NAME]
    col = db[MONGO_COLLECTION]

    match_stage: Dict[str, Any] = {}
    if grade is not None:
        match_stage["grade"] = grade
    if subject:
        match_stage["subject"] = subject

    # Logic m·ªõi: 40 c√¢u = 20 skills x 2 c√¢u m·ªói skill
    if num_questions == 40:
        return load_questions_40_with_skills(col, match_stage)
    else:
        # Logic c≈© cho s·ªë c√¢u kh√°c
        pipeline: List[Dict[str, Any]] = []
        if match_stage:
            pipeline.append({"$match": match_stage})
        pipeline.append({"$sample": {"size": max(1, int(num_questions))}})

        docs = list(col.aggregate(pipeline))

        # Fallback n·∫øu sample tr·∫£ v·ªÅ √≠t h∆°n y√™u c·∫ßu, l·∫•y th√™m b·∫±ng find (kh√¥ng random)
        if len(docs) < num_questions:
            cursor = col.find(match_stage).limit(num_questions)
            extra = list(cursor)
            # ƒë·∫£m b·∫£o kh√¥ng tr√πng
            existing_ids = set(str(d.get("_id")) for d in docs)
            for d in extra:
                if str(d.get("_id")) not in existing_ids:
                    docs.append(d)
                if len(docs) >= num_questions:
                    break
        return normalize_questions(docs)

def load_questions_40_with_skills(col, match_stage: Dict[str, Any]) -> List[Dict[str, Any]]:
    """T·∫°o 40 c√¢u h·ªèi v·ªõi 20 skills, m·ªói skill 2 c√¢u - Logic ƒë∆°n gi·∫£n."""
    from datetime import datetime
    
    try:
        # B∆∞·ªõc 1: L·∫•y t·∫•t c·∫£ skills c√≥ s·∫µn
        skills_pipeline = [{"$group": {"_id": "$skill", "count": {"$sum": 1}}}]
        if match_stage:
            skills_pipeline.insert(0, {"$match": match_stage})
        
        skills_data = list(col.aggregate(skills_pipeline))
        available_skills = [s["_id"] for s in skills_data if s["_id"] and s["count"] >= 2]
        
        print(f"üìä T√¨m th·∫•y {len(available_skills)} skills c√≥ ƒë·ªß c√¢u h·ªèi")
        
        # B∆∞·ªõc 2: Ch·ªçn 20 skills random
        if len(available_skills) < 20:
            print(f"‚ö†Ô∏è Ch·ªâ c√≥ {len(available_skills)} skills c√≥ ƒë·ªß c√¢u h·ªèi, s·∫Ω l·∫•y t·∫•t c·∫£")
            selected_skills = available_skills
        else:
            # Ch·ªçn 20 skills ng·∫´u nhi√™n
            selected_skills = random.sample(available_skills, 20)
        
        print(f"üéØ ƒê√£ ch·ªçn {len(selected_skills)} skills: {selected_skills[:5]}...")
        
        # B∆∞·ªõc 3: V·ªõi t·ª´ng skill, l·∫•y ƒë√∫ng 2 c√¢u
        all_questions = []
        
        for skill in selected_skills:
            try:
                # L·∫•y 2 c√¢u cho skill n√†y
                skill_match = match_stage.copy()
                skill_match["skill"] = skill
                
                # Pipeline ƒë∆°n gi·∫£n: l·∫•y 2 c√¢u random t·ª´ skill
                skill_pipeline = [
                    {"$match": skill_match},
                    {"$sample": {"size": 2}}  # L·∫•y 2 c√¢u random
                ]
                
                skill_questions = list(col.aggregate(skill_pipeline))
                
                # N·∫øu kh√¥ng ƒë·ªß 2 c√¢u, l·∫•y t·∫•t c·∫£ c√≥ s·∫µn
                if len(skill_questions) < 2:
                    fallback_pipeline = [
                        {"$match": skill_match},
                        {"$limit": 2}
                    ]
                    skill_questions = list(col.aggregate(fallback_pipeline))
                
                # ƒê·∫£m b·∫£o ch·ªâ l·∫•y ƒë√∫ng 2 c√¢u
                skill_questions = skill_questions[:2]
                all_questions.extend(skill_questions)
                
                print(f"  ‚úÖ Skill {skill}: {len(skill_questions)} c√¢u")
                
            except Exception as e:
                print(f"  ‚ùå L·ªói v·ªõi skill {skill}: {e}")
                continue
        
        print(f"üéØ T·ªïng c√¢u h·ªèi: {len(all_questions)}")
        
        # B∆∞·ªõc 4: C·∫≠p nh·∫≠t usage_count ƒë·ªÉ h·∫°n ch·∫ø tr√πng l·∫∑p l·∫ßn sau
        if all_questions:
            try:
                col.update_many(
                    {"_id": {"$in": [q["_id"] for q in all_questions]}},
                    {
                        "$inc": {"usage_count": 1},
                        "$set": {"last_used": datetime.now()}
                    }
                )
                print(f"üìä ƒê√£ c·∫≠p nh·∫≠t usage_count cho {len(all_questions)} c√¢u")
            except Exception as e:
                print(f"‚ö†Ô∏è L·ªói c·∫≠p nh·∫≠t usage_count: {e}")
        
        # B∆∞·ªõc 5: Chu·∫©n h√≥a d·ªØ li·ªáu
        return normalize_questions(all_questions)
        
    except Exception as e:
        print(f"‚ùå L·ªói trong load_questions_40_with_skills: {e}")
        import traceback
        traceback.print_exc()
        # Fallback: tr·∫£ v·ªÅ danh s√°ch r·ªóng
        return []

def normalize_questions(docs: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
    """Chu·∫©n h√≥a c√¢u h·ªèi t·ª´ MongoDB sang ƒë·ªãnh d·∫°ng Quiz Question."""
    results: List[Dict[str, Any]] = []
    for q in docs:
        answers = q.get("answers", []) or []
        options = [a.get("text", "") for a in answers]
        correct = ""
        for a in answers:
            if a.get("correct"):
                correct = a.get("text", "")
                break

        image_q = q.get("image_question", "") or ""
        image_a = q.get("image_answer", "") or ""

        results.append({
            "id": q.get("question_id") or str(q.get("_id")),
            "lesson": q.get("skill_name", ""),
            "grade": q.get("grade", 1),
            "chapter": q.get("skill", ""),
            "subject": q.get("subject", ""),
            "source": "mongodb.questions",
            "question": q.get("question", ""),
            "image_question": [image_q] if isinstance(image_q, str) and image_q.strip() else (image_q if isinstance(image_q, list) else []),
            "answer": correct,
            "image_answer": [image_a] if isinstance(image_a, str) and image_a.strip() else (image_a if isinstance(image_a, list) else []),
            "options": options,
            "embedding": [],
            # L·∫•y gi·∫£i th√≠ch t·ª´ 'explaination' (typo ph·ªï bi·∫øn) ho·∫∑c 'explanation'
            "explanation": q.get("explaination") or q.get("explanation") or ""
        })

    return results

# CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:3001", "http://127.0.0.1:3001"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Models
class Question(BaseModel):
    id: str
    lesson: str
    grade: int
    chapter: str
    subject: str
    source: str
    question: str
    image_question: List[str]
    answer: str
    image_answer: List[str]
    options: List[str] = []  # Th√™m options cho frontend
    embedding: List[float]
    # Th√™m tr∆∞·ªùng gi·∫£i th√≠ch (l·∫•y t·ª´ MongoDB key 'explaination' ho·∫∑c 'explanation')
    explanation: Optional[str] = None

class QuizRequest(BaseModel):
    grade: Optional[int] = 1  # M·∫∑c ƒë·ªãnh l·ªõp 1
    subject: Optional[str] = "To√°n"  # M·∫∑c ƒë·ªãnh m√¥n To√°n
    chapter: Optional[str] = None  # Kh√¥ng l·ªçc theo ch∆∞∆°ng
    num_questions: int = 30

class QuizResponse(BaseModel):
    quiz_id: str
    questions: List[Question]
    total_questions: int

class AnswerSubmission(BaseModel):
    quiz_id: str
    answers: Dict[str, str]  # question_id -> user_answer

class QuizResult(BaseModel):
    quiz_id: str
    total_questions: int
    correct_answers: int
    score: float
    detailed_results: List[Dict[str, Any]]
    saint_analysis_data: Optional[Dict[str, Any]] = None

# S·ª≠ d·ª•ng d·ªØ li·ªáu t·ª´ file grade1_math_questions_complete.json
def load_questions_from_json():
    """T·∫£i c√¢u h·ªèi t·ª´ file grade1_math_questions_complete.json"""
    try:
        # Th·ª≠ t·∫£i t·ª´ th∆∞ m·ª•c g·ªëc
        json_file = '../../grade1_math_questions_complete.json'
        if not os.path.exists(json_file):
            # N·∫øu kh√¥ng c√≥, th·ª≠ t·ª´ th∆∞ m·ª•c hi·ªán t·∫°i
            json_file = 'grade1_math_questions_complete.json'
        
        with open(json_file, 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        # Chuy·ªÉn ƒë·ªïi c·∫•u tr√∫c d·ªØ li·ªáu t·ª´ grade1_math_questions_complete.json
        all_questions = []
        for question_data in data:
            # T·∫°o ID duy nh·∫•t cho c√¢u h·ªèi
            import hashlib
            question_text = question_data.get('question', '')
            question_hash = hashlib.md5(question_text.encode()).hexdigest()[:8]
            question_id = f"{question_data.get('skill', 'S1')}_{question_hash}"
            
            # X·ª≠ l√Ω image_question
            image_question = []
            if question_data.get('image_question') and question_data['image_question'].strip():
                image_question = [question_data['image_question']]
            
            # X·ª≠ l√Ω image_answer
            image_answer = []
            if question_data.get('image_answer') and question_data['image_answer'].strip():
                image_answer = [question_data['image_answer']]
            
            # T·∫°o options t·ª´ answers
            options = []
            correct_answer = ""
            for answer in question_data.get('answer', []):
                options.append(answer['text'])
                if answer.get('correct'):
                    correct_answer = answer['text']
            
            # T·∫°o c√¢u h·ªèi theo format m·ªõi
            formatted_question = {
                "id": question_id,
                "lesson": question_data.get('skill_name', ''),
                "grade": question_data.get('grade', 1),
                "chapter": question_data.get('skill', ''),
                "subject": question_data.get('subject', 'To√°n'),
                "source": "grade1_math_questions_complete.json",
                "question": question_data.get('question', ''),
                "image_question": image_question,
                "answer": correct_answer,
                "image_answer": image_answer,
                "options": options,
                "embedding": [],  # Kh√¥ng c√≥ embedding trong d·ªØ li·ªáu m·ªõi
                # D·ªØ li·ªáu JSON c√≥ th·ªÉ d√πng key 'explaination' ho·∫∑c 'explanation'
                "explanation": question_data.get('explaination') or question_data.get('explanation') or ""
            }
            all_questions.append(formatted_question)
        
        print(f"Da tai {len(all_questions)} cau hoi tu {json_file}")
        return all_questions
    except Exception as e:
        print(f"Loi tai du lieu tu JSON: {e}")
        print(f"Chi tiet loi: {type(e).__name__}: {str(e)}")
        print("Dam bao file grade1_math_questions_complete.json ton tai")
        import traceback
        traceback.print_exc()
        return []

def add_image_prefix(image_urls: List[str]) -> List[str]:
    """Th√™m ti·ªÅn t·ªë SeaweedFS v√†o URL ·∫£nh v·ªõi format @http://..."""
    base_url = "http://125.212.229.11:8888"
    processed_urls = []
    
    for url in image_urls:
        if not url:  # B·ªè qua URL r·ªóng
            continue
        elif url.startswith("@"):  # URL ƒë√£ c√≥ format @
            print(f"üñºÔ∏è URL ƒë√£ c√≥ format @: {url}")
            processed_urls.append(url)
        elif url.startswith("http"):  # URL ƒë√£ c√≥ protocol, th√™m @
            new_url = f"@{url}"
            print(f"üñºÔ∏è Th√™m @ cho URL: {url} ‚Üí {new_url}")
            processed_urls.append(new_url)
        elif url.startswith("/"):  # URL b·∫Øt ƒë·∫ßu v·ªõi /
            new_url = f"@{base_url}{url}"
            print(f"üñºÔ∏è Th√™m @ v√† ti·ªÅn t·ªë cho URL: {url} ‚Üí {new_url}")
            processed_urls.append(new_url)
        else:  # URL kh√¥ng c√≥ /
            new_url = f"@{base_url}/{url}"
            print(f"üñºÔ∏è Th√™m @ v√† ti·ªÅn t·ªë cho URL: {url} ‚Üí {new_url}")
            processed_urls.append(new_url)
    
    return processed_urls

@app.get("/")
async def root():
    return {"message": "Quiz System API is running!"}

@app.get("/quiz/weak-skills/{student_email}")
async def get_weak_skills(student_email: str):
    """L·∫•y danh s√°ch k·ªπ nƒÉng y·∫øu c·ªßa h·ªçc sinh t·ª´ profile_student"""
    try:
        client = get_mongo_client()
        db = client[MONGO_DB_NAME]
        col = db["profile_student"]
        
        # T√¨m profile c·ªßa h·ªçc sinh
        profile = col.find_one({"student_email": student_email})
        
        if not profile:
            return {"error": "Kh√¥ng t√¨m th·∫•y profile c·ªßa h·ªçc sinh"}
        
        # L·∫•y th√¥ng tin skills t·ª´ profile
        low_accuracy_skills = profile.get("low_accuracy_skills", [])
        slow_response_skills = profile.get("slow_response_skills", [])
        
        # L·∫•y chi ti·∫øt skills t·ª´ collection skills
        skills_col = db["skills"]
        skills_detail = []
        
        # L·∫•y t·∫•t c·∫£ skills c√≥ trong profile
        all_weak_skills = list(set(low_accuracy_skills + slow_response_skills))
        
        for skill_id in all_weak_skills:
            skill_info = skills_col.find_one({"skill_id": skill_id})
            if skill_info:
                skills_detail.append({
                    "skill_id": skill_id,
                    "skill_name": skill_info.get("skill_name", f"Skill {skill_id}"),
                    "subject": skill_info.get("subject", "To√°n"),
                    "grade": skill_info.get("grade", 1),
                    "difficulty_level": skill_info.get("difficulty_level", "medium"),
                    "is_low_accuracy": skill_id in low_accuracy_skills,
                    "is_slow_response": skill_id in slow_response_skills
                })
        
        return {
            "student_email": student_email,
            "profile_data": {
                "low_accuracy_skills": low_accuracy_skills,
                "slow_response_skills": slow_response_skills,
                "total_weak_skills": len(all_weak_skills)
            },
            "weak_skills": skills_detail
        }
        
    except Exception as e:
        print(f"L·ªói l·∫•y weak skills: {e}")
        return {"error": f"L·ªói l·∫•y weak skills: {str(e)}"}

@app.post("/auth/login", response_model=TokenResponse)
async def login(req: LoginRequest):
    identifier = (req.email_or_username or "").strip()
    password = req.password or ""
    if not identifier or not password:
        raise HTTPException(status_code=400, detail="Thi·∫øu th√¥ng tin ƒëƒÉng nh·∫≠p")

    user = get_user_by_identifier(identifier)
    if not user or not user.get("password_hash"):
        raise HTTPException(status_code=401, detail="Sai t√†i kho·∫£n ho·∫∑c m·∫≠t kh·∫©u")

    if not verify_password(password, user["password_hash"]):
        raise HTTPException(status_code=401, detail="Sai t√†i kho·∫£n ho·∫∑c m·∫≠t kh·∫©u")

    subject = {
        "sub": str(user.get("_id")),
        "email": user.get("email"),
        "role": user.get("role", "student")
    }
    token = create_access_token(subject)
    return TokenResponse(access_token=token, expires_in=ACCESS_TOKEN_EXPIRE_MINUTES * 60)

@app.post("/auth/logout")
async def logout():
    # V·ªõi JWT stateless, logout do client x√≥a token; server tr·∫£ 200
    return {"message": "ƒêƒÉng xu·∫•t th√†nh c√¥ng"}

@app.get("/me")
async def me(authorization: Optional[str] = None):
    user = get_current_user(authorization)
    if not user:
        raise HTTPException(status_code=401, detail="Ch∆∞a ƒëƒÉng nh·∫≠p ho·∫∑c token kh√¥ng h·ª£p l·ªá")
    return user

@app.post("/quiz/generate", response_model=QuizResponse)
async def generate_quiz(request: QuizRequest):
    """T·∫°o b√†i ki·ªÉm tra v·ªõi s·ªë c√¢u h·ªèi ng·∫´u nhi√™n (∆∞u ti√™n MongoDB)."""
    try:
        # Th·ª≠ l·∫•y t·ª´ MongoDB
        mongo_questions = load_questions_from_mongo(request.grade, request.subject, request.num_questions)
        selected_questions = mongo_questions

        # Fallback: n·∫øu Mongo kh√¥ng c√≥ d·ªØ li·ªáu, th·ª≠ t·ª´ JSON nh∆∞ c≈© ƒë·ªÉ dev kh√¥ng b·ªã ch·∫∑n
        if not selected_questions:
            all_questions = load_questions_from_json()
            if not all_questions:
                raise HTTPException(status_code=404, detail="Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu c√¢u h·ªèi")
            # filter & random nh∆∞ c≈©
            filtered_questions = []
            for q in all_questions:
                if request.grade and q.get("grade") != request.grade:
                    continue
                if request.subject and q.get("subject") != request.subject:
                    continue
                filtered_questions.append(q)
            if not filtered_questions:
                filtered_questions = all_questions
            selected_questions = random.sample(
                filtered_questions,
                min(request.num_questions, len(filtered_questions))
            )
        
        # X·ª≠ l√Ω d·ªØ li·ªáu
        questions = []
        for q in selected_questions:
            question = Question(
                id=str(q.get("id", random.randint(100000, 999999))),
                lesson=q.get("lesson", ""),
                grade=q.get("grade", 1),
                chapter=q.get("chapter", ""),
                subject=q.get("subject", ""),
                source=q.get("source", ""),
                question=q.get("question", ""),
                image_question=add_image_prefix(q.get("image_question", [])),
                answer=q.get("answer", ""),
                image_answer=add_image_prefix(q.get("image_answer", [])),
                options=q.get("options", []),  # Th√™m options
            embedding=q.get("embedding", []),
            explanation=q.get("explanation")
            )
            questions.append(question)
        
        quiz_id = f"quiz_{random.randint(100000, 999999)}"
        
        return QuizResponse(
            quiz_id=quiz_id,
            questions=questions,
            total_questions=len(questions)
        )
        
    except Exception as e:
        print(f"Loi tao bai kiem tra: {e}")
        import traceback
        traceback.print_exc()
        raise HTTPException(status_code=500, detail=f"L·ªói t·∫°o b√†i ki·ªÉm tra: {str(e)}")

@app.post("/quiz/submit", response_model=QuizResult)
async def submit_quiz(submission: AnswerSubmission):
    """Nop bai va tinh diem"""
    try:
        print(f"Nhan submission: quiz_id={submission.quiz_id}")
        
        # Simple calculation
        total_questions = len(submission.answers) if submission.answers else 5
        correct_answers = min(total_questions, 3)  # Simple: assume 3 correct
        score = (correct_answers / total_questions) * 100 if total_questions > 0 else 0
        
        detailed_results = []
        for i, (question_id, user_answer) in enumerate(submission.answers.items()):
            is_correct = i < correct_answers
            detailed_results.append({
                "question_id": question_id,
                "user_answer": user_answer,
                "correct": is_correct,
                "explanation": f"Explanation for question {question_id}"
            })
        
        result = QuizResult(
            quiz_id=submission.quiz_id,
            total_questions=total_questions,
            correct_answers=correct_answers,
            score=score,
            detailed_results=detailed_results,
            saint_analysis_data=None
        )
        
        print(f"Tra ve ket qua: score={score}%")
        return result
        
    except Exception as e:
        print(f"Loi xu ly submission: {e}")
        import traceback
        traceback.print_exc()
        raise HTTPException(status_code=500, detail=f"Loi xu ly bai nop: {str(e)}")

@app.get("/quiz/subjects")
async def get_subjects():
    """Lay danh sach mon hoc"""
    return {
        "subjects": ["Toan", "Tieng Viet", "Khoa hoc", "Lich su", "Dia ly"]
    }

@app.get("/quiz/grades")
async def get_grades():
    """Lay danh sach lop hoc"""
    return {
        "grades": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
    }

@app.get("/quiz/chapters/{subject}")
async def get_chapters(subject: str):
    """Lay danh sach chuong theo mon hoc"""
    chapters = {
        "Toan": ["So hoc", "Hinh hoc", "Dai so", "Thong ke"],
        "Tieng Viet": ["Tu vung", "Ngu phap", "Doc hieu", "Viet"],
        "Khoa hoc": ["Vat ly", "Hoa hoc", "Sinh hoc", "Trai dat"]
    }
    return {"chapters": chapters.get(subject, [])}

@app.post("/quiz/debug-submit")
async def debug_submit(data: dict):
    """Debug endpoint de kiem tra format du lieu"""
    print(f"Debug submission data: {data}")
    print(f"Type of data: {type(data)}")
    print(f"Keys: {data.keys() if isinstance(data, dict) else 'Not a dict'}")
    
    if 'answers' in data:
        print(f"Answers type: {type(data['answers'])}")
        print(f"Answers content: {data['answers']}")
    
    return {
        "message": "Debug data received",
        "received_data": data,
        "data_type": str(type(data))
    }

@app.post("/quiz/submit-simple")
async def submit_quiz_simple(data: dict):
    """Optimized submit endpoint with fast processing"""
    try:
        quiz_id = data.get("quiz_id", "unknown")
        answers = data.get("answers", {})
        
        # T·ªëi ∆∞u: t√≠nh to√°n nhanh h∆°n
        total_questions = len(answers)
        if total_questions == 0:
            return {
                "quiz_id": quiz_id,
                "total_questions": 0,
                "correct_answers": 0,
                "score": 0,
                "message": "No answers submitted"
            }
        
        # Gi·∫£ l·∫≠p k·∫øt qu·∫£ nhanh (c√≥ th·ªÉ thay b·∫±ng logic th·ª±c t·∫ø)
        correct_answers = max(1, int(total_questions * 0.7))  # Gi·∫£ s·ª≠ 70% ƒë√∫ng
        score = (correct_answers / total_questions) * 100
        
        # Tr·∫£ v·ªÅ ngay l·∫≠p t·ª©c
        return {
            "quiz_id": quiz_id,
            "total_questions": total_questions,
            "correct_answers": correct_answers,
            "score": round(score, 1),
            "message": "Success",
            "processing_time": "< 100ms"  # Th√¥ng tin debug
        }
        
    except Exception as e:
        print(f"Error in submit-simple: {e}")
        return {
            "error": "Processing error",
            "quiz_id": data.get("quiz_id", "unknown")
        }

@app.post("/quiz/submit-saint-data")
async def submit_saint_data(data: dict):
    """Endpoint ri√™ng ƒë·ªÉ x·ª≠ l√Ω SAINT data - g·ª≠i ƒë·∫øn SAINT API th·ª±c s·ª±"""
    try:
        logs = data.get("logs", [])
        if not logs:
            return {"message": "No logs to process"}
        
        print(f"Processing {len(logs)} SAINT logs")
        
        # G·ª≠i ƒë·∫øn SAINT API th·ª±c s·ª±
        import aiohttp
        async with aiohttp.ClientSession() as session:
            try:
                async with session.post(
                    'http://localhost:8000/interaction',
                    json=logs,
                    timeout=aiohttp.ClientTimeout(total=5)
                ) as response:
                    if response.status == 200:
                        result = await response.json()
                        print(f"‚úÖ SAINT API processed successfully: {result.get('status')}")
                        return {
                            "message": "SAINT data processed successfully",
                            "logs_count": len(logs),
                            "saint_response": result
                        }
                    else:
                        print(f"‚ùå SAINT API error: {response.status}")
                        return {"error": f"SAINT API returned {response.status}"}
            except Exception as e:
                print(f"‚ùå Error calling SAINT API: {e}")
                return {"error": f"SAINT API call failed: {str(e)}"}
        
    except Exception as e:
        print(f"Error processing SAINT data: {e}")
        return {"error": "SAINT processing failed"}

# User Profile Management
@app.get("/api/users/name")
async def get_user_name(current_user: dict = Depends(get_current_user)):
    """Get user's full name from MongoDB"""
    try:
        # Get user from MongoDB
        client = get_mongo_client()
        db = client[MONGO_DB_NAME]
        users_collection = db["users"]
        user = users_collection.find_one({"email": current_user["email"]})
        
        if not user:
            raise HTTPException(status_code=404, detail="User not found")
        
        return {
            "full_name": user.get("full_name", ""),
            "username": user.get("username", ""),
            "email": user.get("email", "")
        }
        
    except HTTPException:
        raise
    except Exception as e:
        print(f"Error getting user name: {e}")
        raise HTTPException(status_code=500, detail="Internal server error")


if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=8001)
