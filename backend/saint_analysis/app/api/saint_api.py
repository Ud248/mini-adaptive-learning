from fastapi import FastAPI, HTTPException, Path, Query    
from pydantic import BaseModel
from fastapi.middleware.cors import CORSMiddleware
import traceback
from app.model.simple_updater import update_student_profile, update_student_profile_batch
from app.services.progress_tracker import get_student_progress
from app.database.milvus_client import get_student_profile 
from app.database.milvus_client import get_student_progress_snapshot
from app.database.milvus_client import get_or_create_skill_progress_collection
from app.database.milvus_client import send_profile_to_milvus

app = FastAPI(title="SAINT++ API")

# Add CORS middleware first
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_methods=["*"],
    allow_headers=["*"],
)

# -------------------- Request Schemas --------------------

class StudentQuery(BaseModel):
    student_id: str

class InteractionLog(BaseModel):
    student_id: str
    timestamp: str
    question_text: str
    answer: str
    skill_id: str
    correct: bool
    response_time: float

class InteractionLogs(BaseModel):
    log: list[InteractionLog]

# -------------------- API Endpoint --------------------

@app.post("/analyze")
def analyze_student(query: StudentQuery):
    """Ph√¢n t√≠ch h·ªì s∆° h·ªçc sinh"""
    profile = get_student_profile(query.student_id)
    if profile is None:
        raise HTTPException(status_code=404, detail="Kh√¥ng t√¨m th·∫•y h·ªçc sinh trong Milvus.")
    return profile

@app.post("/interaction")
def log_interaction(logs: list[InteractionLog]):
    # Ghi log l√†m b√†i ‚Üí c·∫≠p nh·∫≠t h·ªì s∆° h·ªçc sinh v·ªõi to√†n b·ªô log m·ªõi (batch)
    try:
        log_dicts = [log.dict() for log in logs]
        profile = update_student_profile_batch(log_dicts)
        return {
            "status": "Success",
            "profile": profile
        }
    except Exception as e:
        print(67, "---------------------_LOI_----------------------")
        traceback.print_exc()
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/progress/{student_id}")
def get_progress(student_id: str = Path(..., description="ID h·ªçc sinh")):
    # Tr·∫£ v·ªÅ l·ªãch s·ª≠ ti·∫øn b·ªô c·ªßa h·ªçc sinh (d·ª±a v√†o c√°c snapshot ƒë√£ l∆∞u).
    history = get_student_progress(student_id)
    if not history:
        raise HTTPException(status_code=404, detail="Kh√¥ng t√¨m th·∫•y l·ªãch s·ª≠ ti·∫øn b·ªô.")
    return {
        "student_id": student_id,
        "progress_history": history
    }

@app.get("/generate_exercise")
def generate_exercise(student_id: str = Query(..., description="ID h·ªçc sinh")):
    # T·∫°o g·ª£i √Ω b√†i t·∫≠p c√° nh√¢n h√≥a d·ª±a tr√™n h·ªì s∆° k·ªπ nƒÉng t·ª´ Milvus.
    profile = get_student_profile(student_id)
    if profile is None:
        raise HTTPException(status_code=404, detail="Kh√¥ng t√¨m th·∫•y h·ªçc sinh trong Milvus.")

    prompt = (
        f"B·∫°n l√† tr·ª£ l√Ω gi√°o vi√™n l·ªõp 1.\n\n"
        f"üìâ K·ªπ nƒÉng y·∫øu c·ªßa h·ªçc sinh {student_id}: {', '.join(profile.get('low_accuracy_skills', [])) or 'Kh√¥ng c√≥'}\n"
        f"üê¢ K·ªπ nƒÉng ph·∫£n h·ªìi ch·∫≠m: {', '.join(profile.get('slow_response_skills', [])) or 'Kh√¥ng c√≥'}\n\n"
        f"H√£y t·∫°o 5 b√†i t·∫≠p ƒë∆°n gi·∫£n gi√∫p h·ªçc sinh luy·ªán c√°c k·ªπ nƒÉng tr√™n."
    )

    suggested_exercises = [
        f"B√†i t·∫≠p {i+1}: [G·ª£i √Ω luy·ªán k·ªπ nƒÉng y·∫øu]" for i in range(5)
    ]

    return {
        "student_id": student_id,
        "prompt": prompt,
        "suggested_exercises": suggested_exercises
    }
@app.get("/progress_snapshot/{student_id}")
def get_progress_snapshot(student_id: str):
    snapshots = get_student_progress_snapshot(student_id)
    if not snapshots:
        raise HTTPException(status_code=404, detail="Kh√¥ng t√¨m th·∫•y snapshot n√†o.")
    return {
        "student_id": student_id,
        "snapshots": snapshots
    }
@app.get("/skill_trend")
def get_skill_trend(
    student_id: str = Query(..., description="ID h·ªçc sinh"),
    skill_id: str = Query(..., description="ID k·ªπ nƒÉng")
):
    try:
        collection = get_or_create_skill_progress_collection()
        expr = f'student_id == "{student_id}" and skill_id == "{skill_id}"'
        results = collection.query(
            expr=expr,
            output_fields=["timestamp", "accuracy", "avg_time"]
        )

        # ‚úÖ √âp ki·ªÉu float v√† x·ª≠ l√Ω timestamp
        progress = []
        for r in results:
            progress.append({
                "timestamp": r["timestamp"],
                "accuracy": float(r["accuracy"]),
                "avg_time": float(r["avg_time"])
            })

        progress.sort(key=lambda x: x["timestamp"])

        return {
            "student_id": student_id,
            "skill_id": skill_id,
            "progress": progress
        }

    except Exception as e:
        raise HTTPException(status_code=500, detail=f"L·ªói truy v·∫•n Milvus: {e}")
