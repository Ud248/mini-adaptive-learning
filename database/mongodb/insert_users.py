#!/usr/bin/env python3
"""
MongoDB Users Insert Script
Seed t√†i kho·∫£n h·ªçc sinh m·∫´u v·ªõi m·∫≠t kh·∫©u ƒë√£ bƒÉm
"""

import json
import os
from datetime import datetime
from pymongo import MongoClient
from dotenv import load_dotenv
from passlib.context import CryptContext

# Load env
load_dotenv()

MONGO_URL = os.getenv("MONGO_URL", "mongodb://localhost:27017")
DATABASE_NAME = os.getenv("DATABASE_NAME", "quiz_system")

password_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

def connect_mongodb():
    try:
        client = MongoClient(MONGO_URL)
        client.admin.command('ping')
        print(f"‚úÖ Connected to MongoDB at {MONGO_URL}")
        return client
    except Exception as e:
        print(f"‚ùå Error connecting to MongoDB: {e}")
        return None

def load_users_from_json(file_path: str):
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            users = json.load(f)
        print(f"üìä Loaded {len(users)} users from {file_path}")
        return users
    except Exception as e:
        print(f"‚ùå Error loading users: {e}")
        return []

def transform_users(raw_users):
    docs = []
    for u in raw_users:
        email = u.get("email", "").strip().lower()
        username = u.get("username", "").strip()
        role = (u.get("role") or "student").strip()
        full_name = u.get("full_name") or ""
        plain_password = u.get("password") or "Student@123"

        if not email and not username:
            print("‚ö†Ô∏è  Skip user with no email/username")
            continue

        password_hash = password_context.hash(plain_password)

        docs.append({
            "email": email,
            "username": username,
            "role": role,
            "full_name": full_name,
            "password_hash": password_hash,
            "created_at": datetime.utcnow(),
            "updated_at": datetime.utcnow(),
            "status": "active"
        })
    return docs

def upsert_users(db, users_docs):
    col = db["users"]
    inserted, updated = 0, 0
    for doc in users_docs:
        key = {"email": doc["email"]} if doc.get("email") else {"username": doc["username"]}
        existing = col.find_one(key)
        if existing:
            col.update_one({"_id": existing["_id"]}, {"$set": doc})
            updated += 1
        else:
            col.insert_one(doc)
            inserted += 1
    print(f"‚úÖ Users upserted. inserted={inserted}, updated={updated}")

def main():
    print("üöÄ MongoDB Users Insert Script")
    print("=" * 50)

    json_file = "../data_insert/users_sample.json"
    if not os.path.exists(json_file):
        print(f"‚ùå File not found: {json_file}")
        return

    client = connect_mongodb()
    if not client:
        return

    try:
        db = client[DATABASE_NAME]
        raw_users = load_users_from_json(json_file)
        users_docs = transform_users(raw_users)
        if not users_docs:
            print("‚ö†Ô∏è  No users to insert")
            return
        upsert_users(db, users_docs)
        sample = db["users"].find_one({}, {"email": 1, "role": 1})
        print(f"üîé Sample user: {sample}")
        print("üéâ Done!")
    except Exception as e:
        print(f"‚ùå Failed: {e}")
        import traceback
        traceback.print_exc()
    finally:
        client.close()

if __name__ == "__main__":
    main()


